#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

// Структура из одного поля, которое хранит указатель на корень дерева
typedef struct Tree Tree;

// Создать дерево, принимает адрес указателя на дерево, в который
// кладет указатель на выделенную память для структуры дерево, возвращает код ошибки:
// -1 ошибка выделения памяти, 0 всё нормально
int createTree(Tree** treePtrPtr);

// Добавить ключ и строку в дерево, принимает на вход ключ и ненулевые указатели на дерево и строку,
// возвращает код ошибки: -2 на вход дан нулевой указатель, -1 ошибка выделения памяти, 0 всё нормально
int addKeyAndString(Tree* treePtr, int key, char* string);

// Удалить узел из дерева по ключу, принимает на вход ненулевой указатель на дерево, ключ и булеву переменную,
// в которую кладёт true - если узел найден и удалён, false - если узел не найден,
// возвращает код ошибки: -2 на вход дан нулевой указатель, -1 ошибка выделения памяти, 0 всё нормально
int deleteNodeFromTree(Tree* treePtr, int key, bool* isDeleted);

// Принимает ненулевой указатель на дерево, ключ, адрес указателя на строку,
// в которую, выделяя память calloc'ом, копирует строку из найденного по ключу узла,
// возвращает код ошибки: -2 на вход дан нулевой указатель, -1 ошибка выделения памяти, 0 всё нормально
int getStringFromTree(Tree* treePtr, int key, char** destinationStringPtr);

// Принимает на вход ненулевой указатель на дерево, ключ и булеву переменную, в которую записывает
// true - челси узел с данным ключом есть в дереве, иначе false,
// возвращает код ошибки: -2 на вход дан нулевой указатель, 0 всё нормально
int isFoundInTree(Tree* treePtr, int key, bool* isFound);

// Печать дерева прямым обходом, принимает на вход указатель на дерево
void printTreeInPreOrder(Tree* treePtr);

// Удалить дерево и освободить выделенную под него память, принимает на вход указатель на дерево
void freeTree(Tree* treePtr);
